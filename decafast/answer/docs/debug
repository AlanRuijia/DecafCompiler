Expr: T_ID { cout << "Expr: T_ID" }
    | MethodCall { cout << "Expr: MethodCall" }
    | Constant { cout << "Expr: Constant" }
    | Expr BinaryOperator { cout << "Expr: Expr BinaryOperator"; }
    | UnaryOperator { cout << "Expr: Unary"; }
    | T_LPAREN Expr T_RPAREN { cout << "Expr: LPAREN RPAREN"; }
    | T_ID T_LSB Expr T_RSB { cout << "Expr: Array"; }
    ;

Return: T_RETURN T_LPAREN Expr T_RPAREN T_SEMICOLON { cout << "T_RETURN"; }
      | T_RETURN T_SEMICOLON { cout << "T_RETURN"; }
      ;

If: T_IF T_LPAREN Expr T_RPAREN Block T_ELSE Block { cout << "T_IF_ELSE"; }
  | T_IF T_LPAREN Expr T_RPAREN Block   { cout << "T_IF"; };
  ;

Assign: Lvalue "=" Expr { cout << "Assign"; }

Assigns: Assign T_COMMA
       | Assign
       ;

Lvalue: T_ID { cout << "LValue Not Array"; }
      | T_ID T_LSB Expr T_RSB { cout << "Lvalue Array"; }
      ;

UnaryOperator: T_NOT { cout << "Unary Not"; }
             | T_MINUS { cout << "Unary Minus"; }
             ;

ArithmeticOperator: T_PLUS { cout << "ArithOp - Plus"; }
                  | T_MINUS { cout << "ArithOp - Minus"; }
                  | T_MULT { cout << "ArithOp - Multiplication"; }
                  | T_DIV { cout << "ArithOp - Division"; }
                  | T_LEFTSHIFT { cout << "ArithOp - LSH "; }
                  | T_RIGHTSHIFT { cout << "ArithOp - RSH"; }
                  | T_MOD { cout << "ArithOp - Mod"; }
                  ;

BooleanOperator: T_EQ { cout << "BinaryOp - EQ"; }
               | T_NEQ { cout << "BinaryOp - NEQ"; }
               | T_LT { cout << "BinaryOp - LessThan"; }
               | T_GT { cout << "BinaryOp - Greater than"; }
               | T_LEQ { cout << "BinaryOp - Less or equal"; }
               | T_GEQ { cout << "BinaryOp - Greater or equal"; }
               | T_AND { cout << "BinaryOp - And"; }
               | T_OR { cout << "BinaryOp - Or"; }
               ;

BinaryOperator: BooleanOperator   { cout << "BinaryOp - Boolean"; }
              | ArithmeticOperator   { cout << "BinaryOp - Arith"; }
              ;

BoolConstant: T_TRUE { cout << "BoolConstant - True"; }
            | T_FALSE { cout << "BoolConstant - False"; }
            ;

Constant: T_INTCONSTANT { cout << "Int Constant: " << $1 << endl; }
        | T_CHARCONSTANT { cout << "Char Constant"; }
        | BoolConstant { cout << "Bool Constant"; }
        ;

Type: T_INTTYPE { cout << "Int type"; }
    | T_BOOLTYPE { cout << "Bool Type"; }
    ;

ArrayType: T_LSB T_INTCONSTANT T_RSB Type { cout << "Array Type"; }
         ;

MethodType: T_VOID { cout << "methodType - void"; }
          | Type { cout << "MethodType - Other"; }
          ;

ExternType: T_STRINGTYPE { cout << "ExternType - String"; }
          | MethodType { cout << "ExternType - Method"; }
          ;

ExternTypes: ExternType T_COMMA
           | ExternType
           ;

MethodArg: Expr { cout << "MethodArg - Expr"; }
         | T_STRINGCONSTANT { cout << "MethodArg - String"; }
         ;

MethodArgs: MethodArg T_COMMA { cout << "MethodArg - WithComma"; }
          | MethodArg { cout << "MethodArg - Ending"; }
          ;

MethodCall: T_ID T_LPAREN MethodArgs T_RPAREN { cout << "MethodCall - With Arg"; }
          | T_ID T_LPAREN T_RPAREN { cout << "MethodCall - Without Arg"; }

Identifiers: T_ID T_COMMA { cout << "Identifiers";}
           | T_ID  { cout << "Identifiers";}
           ;

VarDecl: T_VAR Identifiers Type T_SEMICOLON { cout << "Var Decl" };

VarDecls: VarDecl;

Block: T_LCB VarDecls statements T_RCB;

FieldDecl: T_VAR Identifiers Type T_SEMICOLON { cout << "Field Decl - NO Array" }
         | T_VAR Identifiers ArrayType T_SEMICOLON { cout << "Field Decl - Array" }
         | T_VAR T_ID Type "=" Constant T_SEMICOLON { cout << "Field Decl - Assign" }
         ;

FieldDecls: FieldDecl;

MethodDecl: T_FUNC T_ID T_LPAREN Identifiers T_RPAREN MethodType Block { cout<< "MethodDecl with IDs"; }
          | T_FUNC T_ID T_LPAREN T_RPAREN MethodType Block { cout<< "MethodDecl no IDs"; }
          ;

MethodDecls: MethodDecl;