output prefix: /Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param
llvmas: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as
llc: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decafexpr
stdlib: /Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decaf-stdlib.c
generating llvm code:/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decafexpr ... ok
; ModuleID = 'C'

declare void @print_int(i32)

define i32 @foo(i32, i32) {
entry:
  %x = alloca i32
  %y = alloca i32
  store i32 %0, i32* %x
  store i32 %1, i32* %y
  store i32 1, i32* %x
  store i32 1, i32* %y
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  %y2 = load i32, i32* %y
  call void @print_int(i32 %y2)
  ret i32 0
}

define i32 @main() {
entry:
  %calltmp = call i32 @foo(i32 1, i32 2)
  ret i32 0
}
assembling to bitcode:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm" -o "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm.bc" ... ok
converting to native code:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm.bc" -o "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm.s" ... ok
linking:gcc -o "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm.exec" "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm.s" "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decaf-stdlib.c" ... ok
running:/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/test/llvm/2param.llvm.exec ... ok
