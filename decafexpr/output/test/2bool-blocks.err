output prefix: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks
llvmas: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as
llc: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decafexpr
stdlib: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decaf-stdlib.c
generating llvm code:/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decafexpr ... ok
; ModuleID = 'C'

declare void @print_int(i32)

define i32 @main() {
entry:
  %x = alloca i1
  %y = alloca i32
  %p = alloca i32
  %q = alloca i32
  %y1 = alloca i1
  store i1 true, i1* %x
  store i1 false, i1* %y1
  store i32 1, i32* %p
  store i32 1, i32* %q
  %p2 = load i32, i32* %p
  call void @print_int(i32 %p2)
  %q3 = load i32, i32* %q
  call void @print_int(i32 %q3)
  %x4 = load i1, i1* %x
  %zexttmp = zext i1 %x4 to i32
  call void @print_int(i32 %zexttmp)
  %y5 = load i1, i1* %y1
  %zexttmp6 = zext i1 %y5 to i32
  call void @print_int(i32 %zexttmp6)
  ret i32 0
}
assembling to bitcode:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm" -o "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm.bc" ... ok
converting to native code:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm.bc" -o "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm.s" ... ok
linking:gcc -o "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm.exec" "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm.s" "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decaf-stdlib.c" ... ok
running:/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/test/llvm/2bool-blocks.llvm.exec ... ok
