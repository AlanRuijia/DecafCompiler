output prefix: /Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch
llvmas: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as
llc: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decafexpr
stdlib: /Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decaf-stdlib.c
generating llvm code:/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decafexpr ... ok
; ModuleID = 'Test'

declare void @print_int(i32)

define void @test3(i1, i32) {
entry:
  %a = alloca i1
  %x = alloca i32
  store i1 %0, i1* %a
  store i32 %1, i32* %x
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  %a2 = load i1, i1* %a
  %zexttmp = zext i1 %a2 to i32
  call void @print_int(i32 %zexttmp)
  ret void
}

define void @test2b(i32, i1) {
entry:
  %x = alloca i32
  %a = alloca i1
  store i32 %0, i32* %x
  store i1 %1, i1* %a
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  %a2 = load i1, i1* %a
  %zexttmp = zext i1 %a2 to i32
  call void @print_int(i32 %zexttmp)
  %a3 = load i1, i1* %a
  %x4 = load i32, i32* %x
  call void @test3(i1 %a3, i32 %x4)
  ret void
}

define void @test2a(i32, i1) {
entry:
  %x = alloca i32
  %a = alloca i1
  store i32 %0, i32* %x
  store i1 %1, i1* %a
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  %a2 = load i1, i1* %a
  %zexttmp = zext i1 %a2 to i32
  call void @print_int(i32 %zexttmp)
  %a3 = load i1, i1* %a
  %NotTmp = xor i1 %a3, true
  %x4 = load i32, i32* %x
  %AddTmp = add i32 %x4, 1
  call void @test3(i1 %NotTmp, i32 %AddTmp)
  ret void
}

define void @test1(i1, i32) {
entry:
  %a = alloca i1
  %x = alloca i32
  store i1 %0, i1* %a
  store i32 %1, i32* %x
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  %a2 = load i1, i1* %a
  %zexttmp = zext i1 %a2 to i32
  call void @print_int(i32 %zexttmp)
  %x3 = load i32, i32* %x
  %AddTmp = add i32 %x3, 1
  %a4 = load i1, i1* %a
  %NotTmp = xor i1 %a4, true
  call void @test2a(i32 %AddTmp, i1 %NotTmp)
  %x5 = load i32, i32* %x
  %AddTmp6 = add i32 %x5, 1
  %a7 = load i1, i1* %a
  %NotTmp8 = xor i1 %a7, true
  call void @test2b(i32 %AddTmp6, i1 %NotTmp8)
  ret void
}

define i32 @main() {
entry:
  call void @test1(i1 true, i32 1)
  ret i32 0
}
assembling to bitcode:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm" -o "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm.bc" ... ok
converting to native code:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm.bc" -o "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm.s" ... ok
linking:gcc -o "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm.exec" "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm.s" "/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/answer/decaf-stdlib.c" ... ok
ld: warning: object file (/var/folders/6l/4w793k193_z5lr9j_yrnfp1r0000gn/T/mixedcallchainexprmultibranch-43e287.o) was built for newer OSX version (10.12) than being linked (10.11)
running:/Users/Jerry/Develop/SFU/compiler/DecafCompiler/decafexpr/output/dev/llvm/mixedcallchainexprmultibranch.llvm.exec ... ok
