output prefix: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr
llvmas: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as
llc: /usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc
cc: gcc
codegen: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decafexpr
stdlib: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decaf-stdlib.c
generating llvm code:/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decafexpr ... ok
; ModuleID = 'Test'

declare void @print_int(i32)

declare i32 @read_int()

define i32 @main() {
entry:
  %x = alloca i32
  %calltmp = call i32 @read_int()
  store i32 %calltmp, i32* %x
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  ret i32 0
}
assembling to bitcode:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llvm-as "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm" -o "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm.bc" ... ok
converting to native code:/usr/local/Cellar/llvm38/3.8.0/lib/llvm-3.8/bin/llc "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm.bc" -o "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm.s" ... ok
linking:gcc -o "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm.exec" "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm.s" "/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/answer/decaf-stdlib.c" ... ok
using input file: /Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/testcases/dev/callexpr.in
running:/Users/Sei/SFU/CMPT379/DecafCompiler/decafexpr/output/dev/llvm/callexpr.llvm.exec ... ok
